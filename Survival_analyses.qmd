---
title: "Article_I_survival_analyses"
format: html
editor: visual
---

```{r}
#Libraries
library(survival)
library(survminer)
library(tidyr)
library(dplyr)
library(ggpattern)
load("/home/daniel/IMMUCAN/full_features")
```

```{r}
#Functions
rand_imput <- function(x) {
  return(sample(x[!is.na(x)],
                length(which(is.na(x))),
                replace = TRUE))
}
```

```{r}
#Import files
raw_counts_IMMU_file <- "/home/daniel/IMMUCAN/SCCHN1/RNAseq/full_counts_HUGO_matrix.tsv"
raw_counts_UPST_file <- "/home/daniel/IMMUCAN/Upstream/RNAseqCounts/full_counts_HUGO_matrix.tsv"
samples_file <- "/home/daniel/IMMUCAN/Upstream/Metadata_Clinicaldata/coldata_samples_all_SCCHN_20240624.csv"
clinical_file <- "/home/daniel/IMMUCAN/Upstream/Metadata_Clinicaldata/IMMUCAN_HN_298_20240821.csv"

raw_counts_IMMU <- read.table(
  raw_counts_IMMU_file,
  header = TRUE,
  sep = "\t",
  row.names = 1,
  check.names = FALSE
)
raw_counts_UPST <- read.table(
  raw_counts_UPST_file,
  header = TRUE,
  sep = "\t",
  row.names = 1,
  check.names = FALSE
)
raw_counts <- cbind(raw_counts_IMMU, raw_counts_UPST)

samples_data_raw <- read.csv(samples_file, sep = ";")
samples_data_raw <- samples_data_raw[!duplicated(samples_data_raw$sample), ]
rownames(samples_data_raw) <- samples_data_raw$sample

clinical_data_raw <- read.csv(clinical_file, sep = ";", row.names = 6)

#Infer FFPE metadata from the corresponding FFPE for FFT samples
ffpe_rna_samples <- grep("FIXT", rownames(samples_data_raw), value = TRUE)
fft_rna_samples <- grep("FFT", rownames(samples_data_raw), value = TRUE)
#For each FFT sample, check if there is a corresponding FFPE sample and record the ID and sampling date
test_ffpes <- sapply(gsub("-F.*", "", fft_rna_samples), function(sample_ids)
  sapply(grep(
    paste(sample_ids, "-FIXT", sep = ""),
    rownames(samples_data_raw),
    value = TRUE
  ), function(possible_ffpes)
    samples_data_raw[possible_ffpes, "SAMPDAT"]))
#Record the corresponding sampling date for the FFT samples
same_date <- sapply(1:length(test_ffpes), function(x)
  names(test_ffpes[[x]])[samples_data_raw[fft_rna_samples[x], "SAMPDAT"] == test_ffpes[[x]]])
#Remove empty values
common_fft_samples <- fft_rna_samples[!sapply(same_date, rlang::is_empty)]
common_ffpe_samples <- same_date[!sapply(same_date, rlang::is_empty)]
#For some cases, there are two identical FFPE samples, we randomly select the first one
common_ffpe_samples <- unlist(lapply(common_ffpe_samples, function(x)
  x[[1]]))
#Select samples with same biopsy site
common_ffpe_samples_final <- common_ffpe_samples[samples_data_raw[common_fft_samples, "subsite_si"] == samples_data_raw[common_ffpe_samples, "subsite_si"]]
common_fft_samples_final <- common_fft_samples[samples_data_raw[common_fft_samples, "subsite_si"] == samples_data_raw[common_ffpe_samples, "subsite_si"]]

#Infer FFPE specific values whenever you can from the corresponding sample
variables_to_replace_fft <- c(
  "AreaSizeval",
  "TumorSurfaceAreaval",
  "AreaPercViaTumorCell",
  "AreaPercentNormalTis",
  "AreaPercentNecrosis",
  "AreaPercentStroma",
  "Fibrosis",
  "LymphocyteInfiltrat"
)
samples_data_raw[common_fft_samples_final, variables_to_replace_fft] <- samples_data_raw[common_ffpe_samples_final, variables_to_replace_fft]
samples_data_raw[common_fft_samples_final, "AssessmentDoneOn"] <- "Whole_slide"

#Select AreaSizeval or TumorSurfaceAreaval depending on microdissection
samples_data_raw$SampleSize <- samples_data_raw$TumorSurfaceAreaval
samples_data_raw$SampleSize_cont <- samples_data_raw$SampleSize
samples_data_raw$SampleSize_cont[samples_data_raw$SampleSize_cont > median(samples_data_raw$SampleSize, na.rm = TRUE)] <- NA
samples_data_raw$SampleSize_bin <- factor(samples_data_raw$SampleSize > median(samples_data_raw$SampleSize, na.rm = TRUE))
levels(samples_data_raw$SampleSize_bin) <- c("Small", "Big")
samples_data_raw[samples_data_raw == ">80%"] <- "80-100%"
samples_data_raw[samples_data_raw == ""] <- NA
samples_data_raw[samples_data_raw == "Not applicable"] <- NA
samples_data_raw$RNA_assay_library[samples_data_raw$RNA_assay_library == "KAPA RNA HyperPrep with RiboErase (HMR) Globin (Roche)"] <- " KAPA RNA HyperPrep with RiboErase (HMR) (Roche)"
samples_data_raw$RNA_assay_library[samples_data_raw$RNA_assay_library == "KAPA RNA HyperPrep with RiboErase (HMR) with KAPA Globin Depletion Hybridization Oligos (Roche)"] <- "KAPA (HMR) + Globin Depletion (Roche)"
samples_data_raw$RNA_nucleic_acid_extraction[is.na(samples_data_raw$RNA_nucleic_acid_extraction)] <- "CNAG_kit"
samples_data_raw$AreaPercentNecrosis[samples_data_raw$AreaPercentNecrosis != "0-30%"] <- "31-80%"
samples_data_raw$AreaPercentNormalTis[samples_data_raw$AreaPercentNormalTis %in% c("51-80%", "80-100%")] <- "51-100%"
samples_data_raw$AreaPercentStroma[samples_data_raw$AreaPercentStroma %in% c("51-80%", "80-100%")] <- "51-100%"

clinical_data_raw$ECOG[clinical_data_raw$ECOG == 3] <- 2
clinical_data_raw$max_line_before_Rbiopsy_si[clinical_data_raw$max_line_before_Rbiopsy_si == ">3"] <- "3+"
clinical_data_raw$max_line_before_Rbiopsy_si[clinical_data_raw$RM_type == "M_naive"] <- "-1"
clinical_data_raw$CPS_PDL1_si[clinical_data_raw$CPS_PDL1_si == ">=20"] <- "20+"
clinical_data_raw$CPS_PDL1_si[clinical_data_raw$CPS_PDL1_si == "Jan-19"] <- "1-19"

clinical_data_raw$AntiPD1_timing_si <- "PD1_naive"
clinical_data_raw$AntiPD1_timing_si[clinical_data_raw$AntiPD1_timing %in% c("PD1_last_treatment", "PD1_previous_treatment")] <- "PD1_treated_before_Rbiopsy"
clinical_data_raw$AntiPD1_timing_si[clinical_data_raw$AntiPD1_timing %in% c("PD1_first_next_treatment", "PD1_other_next_treatment")] <- "PD1_treated_after_Rbiopsy"
clinical_data_raw <- clinical_data_raw %>% mutate(Death = case_when(
  !is.na(Death_date) ~ 1,
  is.na(Timing_Rbiopsy_OS_date) ~
    as.numeric(NA),
  is.na(Death_date) ~ 0
))

clinical_data_raw$max_line_3 <- clinical_data_raw$max_line_before_Rbiopsy_si
clinical_data_raw$max_line_3[clinical_data_raw$max_line_3 %in% c("-1", "0")] <- "Early_max_line"
clinical_data_raw$max_line_3[clinical_data_raw$max_line_3 %in% c("1", "2")] <- "Middle_max_line"
clinical_data_raw$max_line_3[clinical_data_raw$max_line_3 %in% c("3", "3+")] <- "Late_max_line"

#Select RNA samples
samples_data <- samples_data_raw[rownames(samples_data_raw) %in% colnames(raw_counts) &
                                   #samples_data$selection == "selected" &
                                   samples_data_raw$SAMP_timepoint %in% c("Registration", "UPSTREAM_Post_treatment"), ]

#Remove duplicate samples: keep FFT (as it is the most reliable group)
duplicates <- paste(names(table(samples_data$patient))[table(samples_data$patient) == 2], "-FIXT", sep = "")
samples_data <- samples_data[-grep(paste(duplicates, collapse = "|"), rownames(samples_data)), ]

#Remove everything that is not R/M
clinical_data_rm <- clinical_data_raw[rownames(clinical_data_raw) %in% gsub("-F.*", "", rownames(samples_data)), ]
clinical_data_rm <- clinical_data_rm[clinical_data_rm$Article_I == "Yes" , ]
#Remove the RNAseq samples not matching correctly with the DNA
clinical_data_rm <- clinical_data_rm[!grepl("0523", rownames(clinical_data_rm)), ]
samples_data_rm <- samples_data[samples_data$patient %in% rownames(clinical_data_rm), ]
samples_data_rm <- samples_data_rm[order(samples_data_rm$patient), ]
clinical_data_rm <- clinical_data_rm[order(rownames(clinical_data_rm)), ]

clinical_data_rm$FFPE_biopsy_zone_irradiated[grepl("FFT", rownames(samples_data_rm))] <- NA
clinical_data_rm$Frozen_biopsy_zone_irradiated[grepl("FIXT", rownames(samples_data_rm))]  <- NA
clinical_data_rm$Sample_irradiated <- clinical_data_rm$FFPE_biopsy_zone_irradiated
clinical_data_rm$Sample_irradiated[is.na(clinical_data_rm$Sample_irradiated)] <- clinical_data_rm$Frozen_biopsy_zone_irradiated[is.na(clinical_data_rm$Sample_irradiated)]

#Elaborate some variables
relevant_covariates <- cbind(samples_data_rm[, c(
  "specimen_type",
  "samptype",
  "AssessmentDoneOn",
  "SampleSize_bin",
  #"SampleSize_cont",
  #"AreaPercViaTumorCell", "AreaPercentNecrosis",
  #"AreaPercentNormalTis", "AreaPercentStroma", "Fibrosis",
  "RNA_assay_library",
  "RNA_nucleic_acid_extraction",
  "RNA_assay_vendor"
)], clinical_data_rm[, c(
  "Sex",
  "Age_Rbiopsy",
  #"ECOG",
  #"CIG_SUOCCUR", "ALC_SUOCCUR",
  #"Smoking_10PY", "Alcohol_2uF3uM",
  "HPV_status_temp",
  "Consumption",
  "Prim_diagnosis",
  "PRIM_diagnosis_grade_si",
  "PRIM_diagnosis_stage_si",
  #"PRIM_diagnosis_T_si", "PRIM_diagnosis_N_si", "PRIM_diagnosis_M_si",
  "Metastatic_at_Rbiopsy",
  "RM_type",
  "max_line_before_Rbiopsy_si",
  "surg_before_Rbiopsy",
  "surg_multiple_before_Rbiopsy",
  "RT_before_Rbiopsy",
  "RT_multiple_before_Rbiopsy",
  "Sample_irradiated",
  "Platin_before_Rbiopsy",
  "Taxanes_before_Rbiopsy",
  "FU_before_Rbiopsy",
  "AntiEGFR_before_Rbiopsy",
  "Methotrexate_before_Rbiopsy",
  "Gemcitabine_before_Rbiopsy",
  "Other_ST_before_Rbiopsy",
  "AntiPD1_before_Rbiopsy",
  "AntiCTLA4_before_Rbiopsy",
  "ICI_other_before_Rbiopsy",
  "last_treatment_including_antiPD1",
  "last_treatment_including_platin",
  "last_treatment_including_FU",
  "last_treatment_including_taxanes",
  "last_treatment_including_antiEGFR",
  "last_treatment_including_methotrexate"
)]) #"AntiPD1_regimen_si",
#"ST_timing_end_last_treatment_Rbiopsy_cont",
#"ST_timing_end_last_treatment_Rbiopsy_bin")])

#Separate variables according to statistical test to make
for_kruskal <- c(
  "specimen_type",
  "samptype",
  "AssessmentDoneOn",
  "SampleSize_bin",
  #"Fibrosis",
  "RNA_assay_vendor",
  "RNA_assay_library",
  "RNA_nucleic_acid_extraction",
  "Sex",
  # "CIG_SUOCCUR","ALC_SUOCCUR",
  #"Smoking_10PY", "Alcohol_2uF3uM",
  "Consumption",
  "HPV_status_temp",
  "Prim_diagnosis",
  "Metastatic_at_Rbiopsy",
  "RM_type",
  #"PRIM_diagnosis_M_si",
  "surg_before_Rbiopsy",
  "surg_multiple_before_Rbiopsy",
  "RT_before_Rbiopsy",
  "RT_multiple_before_Rbiopsy",
  "Sample_irradiated",
  "Platin_before_Rbiopsy",
  "Taxanes_before_Rbiopsy",
  "FU_before_Rbiopsy",
  "AntiEGFR_before_Rbiopsy",
  "Methotrexate_before_Rbiopsy",
  "Gemcitabine_before_Rbiopsy",
  "Other_ST_before_Rbiopsy",
  "AntiPD1_before_Rbiopsy",
  "AntiCTLA4_before_Rbiopsy",
  "ICI_other_before_Rbiopsy",
  "last_treatment_including_antiPD1",
  "last_treatment_including_platin",
  "last_treatment_including_FU",
  "last_treatment_including_taxanes",
  "last_treatment_including_antiEGFR",
  "last_treatment_including_methotrexate"
)#"AntiPD1_regimen_si",
#"ST_timing_end_last_treatment_Rbiopsy_bin")
#Big questions: ALC_SUOCCUR, CIG_SUOCCUR & PD1_treatment
for_lm <- c(
  #"AreaPercViaTumorCell", "AreaPercentNecrosis", #"SampleSize_cont",
  #"AreaPercentNormalTis", "AreaPercentStroma",
  "Age_Rbiopsy",
  #"ECOG",
  "PRIM_diagnosis_grade_si",
  #"PRIM_diagnosis_T_si","PRIM_diagnosis_N_si",
  "PRIM_diagnosis_stage_si",
  "max_line_before_Rbiopsy_si"
)
#"ST_timing_end_last_treatment_Rbiopsy_cont")

relevant_covariates[, for_lm] <- apply(relevant_covariates[, for_lm], 2, function(x)
  as.numeric(as.factor(x)))



molecular_scores <- read.csv(
  "/home/daniel/IMMUCAN/H&N/molecular_scores_cnv.csv",
  sep = ";",
  row.names = 3,
  dec = ","
)
samples_wes <- samples_data_raw[rownames(samples_data_raw) %in% rownames(molecular_scores) &
                                  samples_data_raw$SAMP_timepoint %in% c("Registration", "UPSTREAM_Post_treatment"), ]
duplicates <- paste(names(table(samples_wes$patient))[table(samples_wes$patient) == 2], "-FIXT", sep = "")
samples_wes <- samples_wes[-grep(paste(duplicates, collapse = "|"), rownames(samples_wes)), ]
clinical_data_rm_wes <- clinical_data_raw[rownames(clinical_data_raw) %in% gsub("-F.*", "", rownames(samples_wes)), ]
clinical_data_rm_wes <- clinical_data_rm_wes[clinical_data_rm_wes$Article_I == "Yes" , ]
samples_data_rm_wes <- samples_wes[samples_wes$patient %in% rownames(clinical_data_rm_wes), ]
samples_data_rm_wes <- samples_data_rm_wes[order(samples_data_rm_wes$patient), ]
clinical_data_rm_wes <- clinical_data_rm_wes[order(rownames(clinical_data_rm_wes)), ]

molecular_scores <- molecular_scores[rownames(samples_data_rm_wes), ]

if3_data <- read.csv(
  "/home/daniel/IMMUCAN/H&N/IF_tables/FinalTables/IF3_cellsproportions_all_samples_20240710.csv",
  sep = ";",
  row.names = 1,
  dec = ","
)
if2_data <- read.csv(
  "/home/daniel/IMMUCAN/H&N/IF_tables/FinalTables/IF2_tumor_scores_all_samples_20240710.csv",
  sep = ";",
  row.names = 1,
  dec = ","
)
if1_data <- read.csv(
  "/home/daniel/IMMUCAN/H&N/IF_tables/FinalTables/IF1_cell_proportions_all_samples_20210710.csv",
  sep = ";",
  row.names = 1,
  dec = ","
)
samples_if3 <- samples_data_raw[rownames(samples_data_raw) %in% rownames(if3_data) &
                                  samples_data_raw$SAMP_timepoint %in% c("Registration", "UPSTREAM_Post_treatment"), ]
clinical_data_rm_if3 <- clinical_data_raw[rownames(clinical_data_raw) %in% gsub("-F.*", "", rownames(samples_if3)), ]
clinical_data_rm_if3 <- clinical_data_rm_if3[clinical_data_rm_if3$Article_I == "Yes" , ]
samples_data_rm_if3 <- samples_if3[samples_if3$patient %in% rownames(clinical_data_rm_if3), ]
samples_data_rm_if3 <- samples_data_rm_if3[order(samples_data_rm_if3$patient), ]
clinical_data_rm_if3 <- clinical_data_rm_if3[order(rownames(clinical_data_rm_if3)), ]

if3_data <- if3_data[rownames(samples_data_rm_if3), ]

samples_if1 <- samples_data_raw[rownames(samples_data_raw) %in% rownames(if1_data) &
                                  samples_data_raw$SAMP_timepoint %in% c("Registration", "UPSTREAM_Post_treatment"), ]
clinical_data_rm_if1 <- clinical_data_raw[rownames(clinical_data_raw) %in% gsub("-F.*", "", rownames(samples_if1)), ]
clinical_data_rm_if1 <- clinical_data_rm_if1[clinical_data_rm_if1$Article_I == "Yes" , ]
samples_data_rm_if1 <- samples_if1[samples_if1$patient %in% rownames(clinical_data_rm_if1), ]
samples_data_rm_if1 <- samples_data_rm_if1[order(samples_data_rm_if1$patient), ]
clinical_data_rm_if1 <- clinical_data_rm_if1[order(rownames(clinical_data_rm_if1)), ]

if1_data <- if1_data[rownames(samples_data_rm_if1), ]

samples_if2 <- samples_data_raw[rownames(samples_data_raw) %in% rownames(if2_data) &
                                  samples_data_raw$SAMP_timepoint %in% c("Registration", "UPSTREAM_Post_treatment"), ]
clinical_data_rm_if2 <- clinical_data_raw[rownames(clinical_data_raw) %in% gsub("-F.*", "", rownames(samples_if2)), ]
clinical_data_rm_if2 <- clinical_data_rm_if2[clinical_data_rm_if2$Article_I == "Yes" , ]
samples_data_rm_if2 <- samples_if2[samples_if2$patient %in% rownames(clinical_data_rm_if2), ]
samples_data_rm_if2 <- samples_data_rm_if2[order(samples_data_rm_if2$patient), ]
clinical_data_rm_if2 <- clinical_data_rm_if2[order(rownames(clinical_data_rm_if2)), ]

if2_data <- if2_data[rownames(samples_data_rm_if2), ]


#CD8 phenotypes
CD8_cats <- read.csv("/home/daniel/IMMUCAN/H&N/ImmuneType_CD8_IF3_g.csv",
                     row.names = 1)
CD8_cats$immuneCD8_type_3[CD8_cats$immuneCD8_type_3 == "CD8_desert"] <- "Tcell CD8+ desert"
CD8_cats$immuneCD8_type_3[CD8_cats$immuneCD8_type_3 == "CD8_excluded"] <- "Tcell CD8+ excluded"
CD8_cats$immuneCD8_type_3[CD8_cats$immuneCD8_type_3 == "CD8_infiltrated"] <- "Tcell CD8+ infiltrated"
```

```{r}
#Random imputation for missing clinical data
relevant_covariates_imp_rand <- relevant_covariates
set.seed(1)
rand_imputations <- lapply(relevant_covariates_imp_rand, rand_imput)
relevant_covariates_imp_rand <- as.data.frame(sapply(1:ncol(relevant_covariates), function(x)
  ifelse(
    is.na(relevant_covariates[, x]),
    rand_imputations[[x]],
    relevant_covariates[, x]
  )))
colnames(relevant_covariates_imp_rand) <- colnames(relevant_covariates)
rownames(relevant_covariates_imp_rand) <- rownames(relevant_covariates)
relevant_covariates_imp_rand[, for_lm] <- apply(relevant_covariates_imp_rand[, for_lm], 2, function(x)
  as.numeric(as.factor(x)))
```

```{r}
#To do the transcriptomic cox models, we correct the transcriptomic variables by sample variables
corrected_full_features <- sapply(colnames(full_features), function(x)
  lm(
    full_features[, x] ~ samptype +
      specimen_type + RNA_nucleic_acid_extraction +
      RNA_assay_library + AssessmentDoneOn + SampleSize_bin
    ,
    data = relevant_covariates_imp_rand
  )$residuals)
#Function to compute cox model with main clinical variables
compute_cox <- function(features, clindata) {
  return(sapply(colnames(features), function(x)
    summary(
      coxph(
        Surv(Timing_Rbiopsy_OS_date, event = Death, type = "right") ~ features[, x] +
          factor(ECOG_si) + Consumption + HPV_status_temp + Prim_diagnosis + AntiPD1_timing_si +
          as.numeric(as.factor(max_line_before_Rbiopsy_si)) + Metastatic_at_Rbiopsy,
        data = clindata
      )
    )$coefficients[1, c(1, 5)]))
}
pathway_wes <- read.csv(
  "/home/daniel/IMMUCAN/H&N/WES_tables/FinalFilesv2/HN_pathways_20240820.csv",
  sep = ";",
  row.names = 1
)
pathway_wes <- pathway_wes[rownames(samples_data_rm_wes), ]
cnv_wes <- read.csv(
  "/home/daniel/IMMUCAN/H&N/WES_tables/FinalFilesv2/HN_CNVgene_20240820.csv",
  sep = ";",
  row.names = 1
)
cnv_wes <- cnv_wes[rownames(samples_data_rm_wes), ]
cnv_wes <- cnv_wes[, -1]
colnames(cnv_wes) <- paste(colnames(cnv_wes), "cnv", sep = "_")
snv_wes <- read.csv(
  "/home/daniel/IMMUCAN/H&N/WES_tables/FinalFilesv2/HN_variants_20240820.csv",
  sep = ";",
  row.names = 1
)
snv_wes <- snv_wes[rownames(samples_data_rm_wes), ]
snv_wes <- snv_wes[, -1]
#We filter genes with freq < 3%
threshold <- 0.03 * nrow(snv_wes)
# Function to check if the minor category frequency is at least 3%
keep_column <- function(column) {
  # Get the frequency of each unique value
  freq_table <- table(column)
  # If there's only one unique value, return FALSE (minor category frequency is 0)
  if (length(freq_table) == 1) {
    return(FALSE)
  }
  # Identify the minor category
  minor_category_freq <- min(freq_table)
  # Check if it meets the threshold
  return(minor_category_freq >= threshold)
}

# Apply the filter to the data frame columns
snv_wes <- snv_wes[, sapply(colnames(snv_wes), function(x)
  keep_column(snv_wes[, x]))]
cnv_wes <- cnv_wes[, sapply(cnv_wes, keep_column)]
pathway_wes <- pathway_wes[, sapply(pathway_wes, keep_column)]
full_wes <- cbind(snv_wes, cnv_wes, pathway_wes)

test_cox_rna <- compute_cox(corrected_full_features, clinical_data_rm)
test_cox_if1 <- compute_cox(if1_data, clinical_data_rm_if1)
test_cox_if2 <- compute_cox(if2_data, clinical_data_rm_if2)
test_cox_if3 <- compute_cox(if3_data, clinical_data_rm_if3)
test_cox_wes <- compute_cox(full_wes, clinical_data_rm_wes)
test_cox_CD8 <- summary(
  coxph(
    Surv(Timing_Rbiopsy_OS_date, event = Death, type = "right") ~ CD8_cats[rownames(samples_data_rm_if3), "immuneCD8_type_3"] +
      factor(ECOG_si) + Consumption + HPV_status_temp + Prim_diagnosis + AntiPD1_timing_si +
      as.numeric(as.factor(max_line_before_Rbiopsy_si)) + Metastatic_at_Rbiopsy,
    data = clinical_data_rm_if3
  )
)$coefficients[2, c(1, 5)]

full_cox <- cbind(
  test_cox_rna,
  test_cox_if1,
  test_cox_if2,
  test_cox_if3,
  test_cox_wes,
  "CD8_infiltrated" = test_cox_CD8
)
final_cox <- p.adjust(full_cox[2, ], "BH")
final_cox <- final_cox[final_cox < 0.1]
final_cox <- data.frame(-log10(final_cox))
final_cox$feature <- rownames(final_cox)
colnames(final_cox) <- c("p_value", "feature")
final_cox$Modality <- "RNAseq"
final_cox$Modality[grepl("stroma|tumor|total|infiltrated", final_cox$feature)] <- "IF"
final_cox$Prognosis <- "Worse prognosis"
final_cox$Prognosis[full_cox[1, rownames(final_cox)] < 0] <- "Better prognosis"
```

```{r}
#Figure 7A left) Prognostic features
final_cox %>%
  ggplot(aes(
    x = reorder(feature, p_value),
    y = p_value,
    fill = Modality,
    pattern = Prognosis
  )) + coord_flip() +
  geom_bar_pattern(
    position = position_dodge(preserve = "single"),
    stat = "identity",
    color = "black",
    pattern_fill = "black",
    pattern_angle = 45,
    pattern_density = 0.1,
    pattern_spacing = 0.025,
    pattern_key_scale_factor = 0.6
  ) +
  scale_fill_manual(values = colorRampPalette(c("#0066CC", "#FFFFFF", "#FF8C00"))(2)) +
  scale_pattern_manual(values = c(`Better prognosis` = "stripe", `Worse prognosis` = "none")) +
  theme_bw(base_size = 30, base_family = "Helvetica") +
  theme(text = element_text(size = 18),
        legend.position = c(0.8, 0.2)) + xlab("") + ylab("-log10(q-value)") +
  guides(pattern = guide_legend(override.aes = list(fill = "white")),
         fill = guide_legend(override.aes = list(pattern = "none")))
```

```{r output = FALSE}
#Subgroup analysis
clin_vars <- c(
  "Consumption",
  "Prim_diagnosis_HPVstatus",
  "HPV_status_temp",
  "max_line_3",
  "Metastatic_at_Rbiopsy"
)
all_models <- list()

#Define new cox function
compute_cox <- function(features,
                        clindata,
                        temp_vars,
                        include_aPD1 = TRUE) {
  if (include_aPD1) {
    return(sapply(colnames(features), function(x)
      summary(coxph(
        Surv(
          Timing_Rbiopsy_OS_date,
          event = Death,
          type = "right"
        ) ~ features[, x] + clindata[, "AntiPD1_timing_si"] ,
        data = clindata[, c(temp_vars, "Timing_Rbiopsy_OS_date", "Death")]
      ))$coefficients[1, 5]))
  } else {
    return(sapply(colnames(features), function(x)
      summary(coxph(
        Surv(
          Timing_Rbiopsy_OS_date,
          event = Death,
          type = "right"
        ) ~ features[, x],
        data = clindata[, c(temp_vars, "Timing_Rbiopsy_OS_date", "Death")]
      ))$coefficients[1, 5]))
    
  }
}
for (element in clin_vars) {
  include_antiPD1 <- TRUE
  #Get categories
  categories <- unique(names(table(clinical_data_raw[, element])))
  temp_vars <- clin_vars[-grep(element, clin_vars)]
  if (element == "Prim_diagnosis_HPVstatus") {
    categories <- c("Hypopharynx", "Larynx", "Oral_cavity", "Oropharynx_HPV-")
  }
  for (subcat in categories) {
    if (subcat == "Oropharynx_HPV-") {
      temp_vars <- temp_vars[-grep("HPV_status_temp|Consumption", temp_vars)]
    }
    if (subcat %in% c("Late_max_line", "Middle_max_line")) {
      include_antiPD1 <- FALSE
    }
    print(paste("Doing RNA for", subcat, sep = " "))
    test_cox_rna <- compute_cox(corrected_full_features[clinical_data_rm[, element] %in% subcat, ],
                                clinical_data_rm[clinical_data_rm[, element] %in% subcat, ],
                                temp_vars,
                                include_antiPD1)
    print(paste("Doing IF1 for", subcat, sep = " "))
    test_cox_if1 <- compute_cox(if1_data[clinical_data_rm_if1[, element] %in% subcat, ],
                                clinical_data_rm_if1[clinical_data_rm_if1[, element] %in% subcat, ],
                                temp_vars,
                                include_antiPD1)
    print(paste("Doing IF2 for", subcat, sep = " "))
    test_cox_if2 <- compute_cox(if2_data[clinical_data_rm_if2[, element] %in% subcat, ],
                                clinical_data_rm_if2[clinical_data_rm_if2[, element] %in% subcat, ],
                                temp_vars,
                                include_antiPD1)
    print(paste("Doing IF3 for", subcat, sep = " "))
    test_cox_if3 <- compute_cox(if3_data[clinical_data_rm_if3[, element] %in% subcat, ],
                                clinical_data_rm_if3[clinical_data_rm_if3[, element] %in% subcat, ],
                                temp_vars,
                                include_antiPD1)
    CD8_infiltrated <- summary(coxph(
      Surv(
        Timing_Rbiopsy_OS_date,
        event = Death,
        type = "right"
      ) ~ CD8_cats[rownames(samples_data_rm_if3), "immuneCD8_type_3"][clinical_data_rm_if3[, element] %in% subcat],
      data = clinical_data_rm_if3[clinical_data_rm_if3[, element] %in% subcat, c(temp_vars, "Timing_Rbiopsy_OS_date", "Death")]
    ))$coefficients[2, 5]
    full_cox_temp <- c(test_cox_rna,
                       test_cox_if1,
                       test_cox_if2,
                       test_cox_if3,
                       CD8_infiltrated)
    all_models[[subcat]] <- full_cox_temp
  }
}

```

```{r}
#Figure 7A) right panel - Subgroup analysis of prognostic features
all_models <- data.frame(all_models, check.names = FALSE)
rownames(all_models)[312] <- "CD8_infiltrated"
all_models <- all_models[rownames(final_cox), ]
#Remove non-significant p-values or too similar between subgroups 
all_models[apply(all_models[, 1:2], 1, function(x)
  (log10(x[1] / x[2]) < 1 &
     log10(x[1] / x[2]) > -1) | min(x) > 0.05), 1:2] <- NA
all_models[apply(all_models[, 3:6], 1, function(x)
  (log10(min(x) / max(x)) < 1 &
     log10(min(x) / max(x)) > -1) | min(x) > 0.05), 3:6] <- NA
all_models[apply(all_models[, 7:8], 1, function(x)
  (log10(x[1] / x[2]) < 1 &
     log10(x[1] / x[2]) > -1) | min(x) > 0.05), 7:8] <- NA
all_models[apply(all_models[, 9:10], 1, function(x)
  (log10(x[1] / x[2]) < 1 &
     log10(x[1] / x[2]) > -1) | min(x) > 0.05), 9:10] <- NA
all_models[apply(all_models[, 11:12], 1, function(x)
  (log10(x[1] / x[2]) < 1 &
     log10(x[1] / x[2]) > -1) | min(x) > 0.05), 11:12] <- NA
all_models[all_models > 0.05] <- NA
all_models <- -log10(all_models)
#all_models <- all_models[!apply(all_models, 1, function(x) all(is.na(x))), ]
all_models$feature <- rownames(all_models)
all_models_long <- all_models %>% pivot_longer(!feature, names_to = "clinical_var", values_to = "p_value")
all_models_long$clinical_var <- factor(
  all_models_long$clinical_var,
  levels =  c(
    "Non_smoker_non_drinker",
    "Smoker_and_or_drinker",
    "Larynx",
    "Hypopharynx",
    "Oropharynx_HPV-",
    "Oral_cavity",
    "Negative",
    "Positive",
    "Early_max_line",
    "Middle_max_line",
    "Late_max_line",
    "RM_refractory",
    "No",
    "Yes"
  )
)
all_models_long$full_pvalue <- final_cox[all_models_long$feature, "p_value"]
all_models_long[all_models_long$feature %in% rownames(final_cox), ] %>%
  ggplot(aes(
    x = clinical_var,
    y = reorder(feature, full_pvalue),
    size = p_value
  )) +
  geom_point() +
  theme_bw(base_size = 30, base_family = "Helvetica") +
  theme(text = element_text(size = 12))  + xlab("") + ylab("") +
  guides(size = guide_legend(title = "log10(p-value)")) +
  scale_x_discrete(
    labels = c(
      "Non_smoker_non_drinker" = "Non-smoker non-drinkers",
      "Smoker_and_or_drinker" = "Smoker and/or drinker",
      "Oropharynx_HPV-" = "Oropharynx (HPV-)",
      "Oral_cavity" = "Oral cavity",
      "Negative" = "HPV-negative",
      "Positive" = "HPV-positive",
      "Early_max_line" = "<1 systemic treatment line",
      "Middle_max_line" = "1-2 systemic treatment lines",
      "Late_max_line" = ">3 systemic treatment lines",
      "No" = "Locoregional disease only",
      "Yes" = "Distant metastatic disease"
    ),
    guide = guide_axis(angle = 45)
  ) +
  geom_vline(xintercept = c(2.5, 6.5, 8.5, 11.5), linetype="dashed", 
               color = "grey50", size=1)
  
```

```{r}
get_quantiles_feature <- function(omic_feature, feature_table, probs) {
  quantiles_feature <- quantile(feature_table[, omic_feature], probs = probs)
  quantiles_feature[1] <- quantiles_feature[1] - 0.01
  quantiles_feature <- cut(feature_table[, omic_feature], quantiles_feature)
  levels(quantiles_feature) <- c("1", "2")
  return(quantiles_feature)
}

plot_survival <- function(data_matrix,
                          clinical_matrix,
                          clin_variable,
                          clin_value,
                          data_variable,
                          probs,
                          legend_text) {
  test_clin_data <- cbind(clinical_matrix[clinical_matrix[, clin_variable] == clin_value, ],
                          "feature_quantiles" =  get_quantiles_feature(data_variable, data_matrix[clinical_matrix[, clin_variable] == clin_value, ], probs))
  fit <- survfit(
    Surv(
      Timing_Rbiopsy_OS_date / 360,
      event = Death,
      type = "right"
    ) ~ feature_quantiles,
    data = test_clin_data
  )
  ggsurvplot(
    fit,
    data = test_clin_data,
    pval = TRUE,
    conf.int = FALSE,
    legend = c(0.7, 0.85),
    legend.labs = legend_text,
    ggtheme = theme_bw(base_size = 15, base_family = "Helvetica")
  ) +
    xlab("Time (years)")
}
```

```{r}
#Figure 7B-E) Kaplan-Meier plots
plot_survival(
  corrected_full_features,
  clinical_data_rm,
  "Metastatic_at_Rbiopsy",
  "No",
  "ICA_27",
  c(0, 0.25, 1),
  c("ICA 27 < Q1 (n=12)", "ICA 27 > Q1 (n=43)")
)
plot_survival(
  corrected_full_features,
  clinical_data_rm,
  "Metastatic_at_Rbiopsy",
  "Yes",
  "ICA_27",
  c(0, 0.25, 1),
  c("ICA 27 < Q1 (n=31)", "ICA 27 > Q1 (n=92)")
)

plot_survival(
  if1_data,
  clinical_data_rm_if1,
  "Metastatic_at_Rbiopsy",
  "No",
  "B_stroma_p",
  c(0, 0.5, 1),
  c("B cell stroma % < Q2 (n=27)", "B cell stroma % > Q2 (n=29)")
)
plot_survival(
  if1_data,
  clinical_data_rm_if1,
  "Metastatic_at_Rbiopsy",
  "Yes",
  "B_stroma_p",
  c(0, 0.5, 1),
  c("B cell stroma % < Q2 (n=52)", "B cell stroma % > Q2 (n=58)")
)

plot_survival(
  if3_data,
  clinical_data_rm_if3,
  "Metastatic_at_Rbiopsy",
  "Yes",
  "CD8_totalR",
  c(0, 0.5, 1),
  c("CD8+ T cell total % < Q2 (n=51)", "CD8+ T cell total % > Q2 (n=64)")
)
plot_survival(
  if3_data,
  clinical_data_rm_if3,
  "Metastatic_at_Rbiopsy",
  "No",
  "CD8_totalR",
  c(0, 0.5, 1),
  c("CD8+ T cell total % < Q2 (n=25)", "CD8+ T cell total % > Q2 (n=28)")
)

plot_survival(
  if1_data,
  clinical_data_rm_if1,
  "HPV_status_temp",
  "Negative",
  "T_total_p",
  c(0, 0.75, 1),
  c("T cell total % < Q3 (n=97)", "T cell total % > Q3 (n=37)")
)
plot_survival(
  if1_data,
  clinical_data_rm_if1,
  "HPV_status_temp",
  "Positive",
  "T_total_p",
  c(0, 0.75, 1),
  c("T cell total % < Q3 (n=23)", "T cell total % > Q3 (n=9)")
)
```

```{r}
#Figure 7B-E) Multivariate Cox survival models
clin_cox <- as.data.frame(cbind(if1_data[, "T_total_p"], clinical_data_rm_if1[, c(
  "ECOG_si",
  "Consumption",
  "HPV_status_temp",
  "Prim_diagnosis",
  "max_line_before_Rbiopsy_si",
  "Metastatic_at_Rbiopsy",
  "Timing_Rbiopsy_OS_date",
  "Death"
)]))
clin_cox$ECOG_si <- factor(clin_cox$ECOG_si)
clin_cox$max_line_before_Rbiopsy_si <- as.numeric(as.factor(clin_cox$max_line_before_Rbiopsy_si))
colnames(clin_cox) <- c(
  "T_total_p",
  "ECOG",
  "Substance abuse",
  "HPV status",
  "Primary diagnosis location",
  "N° prior treatment lines",
  "Disease extent",
  "Timing_Rbiopsy_OS_date",
  "Death"
)
clin_cox[clin_cox == "Non_smoker_non_drinker"] <- "Non smoker non drinker"
clin_cox[clin_cox == "Smoker_and_or_drinker"] <- "Smoker and/or drinker"
clin_cox[clin_cox == "Oral_cavity"] <- "Oral cavity"
clin_cox[clin_cox == "No"] <- "Locoregional disease only"
clin_cox[clin_cox == "Yes"] <- "Distant metastastatic disease"

model1 <- coxph(
  Surv(Timing_Rbiopsy_OS_date, event = Death, type = "right") ~ `T_total_p` +
    ECOG + `Substance abuse` + `HPV status` + `Primary diagnosis location` +
    `N° prior treatment lines` + `Disease extent`,
  data = clin_cox
)
ggforest(model1, data = clin_cox, fontsize = 1)
```
